{"ast":null,"code":"import _classCallCheck from \"/home/meagangould/Desktop/MarsMapMaker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/meagangould/Desktop/MarsMapMaker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/meagangould/Desktop/MarsMapMaker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/meagangould/Desktop/MarsMapMaker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/meagangould/Desktop/MarsMapMaker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/meagangould/Desktop/MarsMapMaker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/meagangould/Desktop/MarsMapMaker/src/components/BuilderComponents/ConversionField.js\";\nimport React, { Component } from 'react';\nimport \"../css/MapBuilder.css\";\nimport { conversionUserOptions } from \"./Helpers/renderSelectOptions\";\nimport { CM, FORMAT_CONV, FORMAT_M21, MM } from \"./Helpers/FileHelpers\";\n\nvar ConversionField =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ConversionField, _Component);\n\n  function ConversionField(props) {\n    var _this;\n\n    _classCallCheck(this, ConversionField);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConversionField).call(this, props));\n\n    _this.getUnselected = function () {\n      var selectedNow = _this.state.field;\n      var wasSubmitted = _this.state.submittedField ? _this.state.submittedField : null; // console.log(\"snap\",snapShot, \"selectedNow\",selectedNow)\n\n      var removeMe = []; // if(snapShot!= null) {\n      //     for (var each of snapShot) {\n      //         console.log(\"each\",each)\n      //         if ( selectedNow.indexOf(each) <0 ) removeMe.push(each)\n      //     }\n      // }\n\n      if (wasSubmitted != null) {\n        if (selectedNow != wasSubmitted) removeMe = [wasSubmitted];\n      }\n\n      console.log(\"removeme!\", removeMe);\n      return removeMe;\n    };\n\n    _this.extraUnitField = function () {\n      if (_this.props.addFieldCount > 0) {\n        return React.createElement(\"div\", {\n          className: \"inline\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick(e) {\n            return _this.removeSelection(e);\n          },\n          className: \"inline fa fa-minus\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }), React.createElement(\"select\", {\n          className: \"form-control inline inline-grid\",\n          id: \"sel2\",\n          name: \"sellist2\",\n          onChange: _this.setField,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, conversionUserOptions(_this.props.allUserFields)), React.createElement(\"div\", {\n          className: \"unit inline\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"radio\",\n          name: \"measure_unit\",\n          value: CM,\n          onClick: _this.setUnit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }), \"CM \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"radio\",\n          name: \"measure_unit\",\n          value: MM,\n          onClick: _this.setUnit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }), \"MM\"));\n      }\n    };\n\n    _this.addConversionValue = function () {\n      _this.props.addConversionValue(_this.props.selectedField, //adds secondary field w unit to mapValues\n      {\n        field: _this.state.field,\n        unit: _this.state.unit\n      });\n    };\n\n    _this.toggleAdd = function () {\n      _this.setState({\n        addValue: !_this.state.addValue\n      });\n    };\n\n    _this.removeFieldCallBack = function () {\n      //if removing secondary field, enables the field and removes data from mapValues\n      _this.props.removeFieldCallBack(_this.state.field, _this.props.selectedField);\n    };\n\n    _this.removeSelection = function () {\n      console.log(\"removeselection\");\n\n      _this.props.minusField(FORMAT_CONV);\n\n      _this.removeFieldCallBack();\n\n      _this.setState({\n        field: null\n      });\n    };\n\n    _this.submitSelection = function () {\n      console.log(\"alpa\", _this.props.selectedField, \"stateField\", _this.state.field, \"unselecettd\", _this.getUnselected());\n      var _this$props = _this.props,\n          selectedField = _this$props.selectedField,\n          multiCallBack = _this$props.multiCallBack;\n\n      if (_this.state.field) {\n        multiCallBack({\n          selectedField: selectedField\n        }, [_this.state.field], //because callback fcts expect array for these values\n        FORMAT_CONV, _this.getUnselected());\n      }\n\n      _this.setState({\n        submittedField: _this.state.field\n      });\n    };\n\n    _this.showButton = function () {\n      var _this$state = _this.state,\n          unit = _this$state.unit,\n          field = _this$state.field;\n\n      if (_this.state.addValue === false) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, \"Do additional fields comprise the whole data?\"), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this.toggleAdd();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, \" Yes\"));\n      }\n\n      if (_this.state.addValue !== false && unit !== undefined && field !== undefined) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this.submitSelection();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, \"Submit\"));\n      }\n    };\n\n    _this.state = {\n      field: null,\n      unit: null,\n      addValue: false\n    };\n    _this.displayExample = _this.displayExample.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setField = _this.setField.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setUnit = _this.setUnit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ConversionField, [{\n    key: \"displayExample\",\n    value: function displayExample() {\n      if (this.state.field && this.state.field.length > 0) {\n        return this.props.sesarValues.sesarField + \" : \" + \"[\" + this.state.field.toString() + \"]\";\n      } else return \"\";\n    }\n  }, {\n    key: \"setUnit\",\n    value: function setUnit(e) {\n      this.setState({\n        unit: e.target.value\n      }, this.addConversionValue);\n    }\n  }, {\n    key: \"setField\",\n    value: function setField(e) {\n      this.setState({\n        field: e.target.value.split(\" \")[0],\n        showConv: true\n      }, this.submitSelection);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(\"CONVERS\",this.props)\n      return React.createElement(\"div\", {\n        className: \"fieldElement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, this.extraUnitField(), React.createElement(\"div\", {\n        className: \"showMapping\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ConversionField;\n}(Component);\n\nexport default ConversionField;","map":{"version":3,"sources":["/home/meagangould/Desktop/MarsMapMaker/src/components/BuilderComponents/ConversionField.js"],"names":["React","Component","conversionUserOptions","CM","FORMAT_CONV","FORMAT_M21","MM","ConversionField","props","getUnselected","selectedNow","state","field","wasSubmitted","submittedField","removeMe","console","log","extraUnitField","addFieldCount","e","removeSelection","setField","allUserFields","setUnit","addConversionValue","selectedField","unit","toggleAdd","setState","addValue","removeFieldCallBack","minusField","submitSelection","multiCallBack","showButton","undefined","displayExample","bind","length","sesarValues","sesarField","toString","target","value","split","showConv"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport \"../css/MapBuilder.css\"\nimport {conversionUserOptions} from \"./Helpers/renderSelectOptions\"\nimport {CM, FORMAT_CONV, FORMAT_M21, MM} from \"./Helpers/FileHelpers\"\n\nclass ConversionField extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {field: null, unit: null, addValue: false}\n        this.displayExample = this.displayExample.bind(this);\n\n        this.setField = this.setField.bind(this);\n        this.setUnit = this.setUnit.bind(this);\n    }\n\n    displayExample() {\n        if (this.state.field && this.state.field.length > 0) {\n            return (\n                this.props.sesarValues.sesarField + \" : \" + \"[\" + this.state.field.toString() + \"]\"\n            )\n        }\n        else return \"\"\n    }\n\n    getUnselected = () => {\n\n        let selectedNow = this.state.field;\n        let wasSubmitted = (this.state.submittedField) ? this.state.submittedField : null;\n        // console.log(\"snap\",snapShot, \"selectedNow\",selectedNow)\n        let removeMe=[];\n        // if(snapShot!= null) {\n        //     for (var each of snapShot) {\n        //         console.log(\"each\",each)\n        //         if ( selectedNow.indexOf(each) <0 ) removeMe.push(each)\n        //     }\n        // }\n        if (wasSubmitted != null) {\n\n            if (selectedNow != wasSubmitted) removeMe=[wasSubmitted]\n        }\n    console.log(\"removeme!\",removeMe)\n    return removeMe\n}\n\n\nextraUnitField = () =>{\n        if(this.props.addFieldCount > 0) {\n            return (\n                <div className=\"inline\">\n\n                    <button onClick={(e) => this.removeSelection(e)} className=\"inline fa fa-minus\"/>\n\n                    <select className=\"form-control inline inline-grid\" id=\"sel2\" name=\"sellist2\" onChange={this.setField}>\n                        {conversionUserOptions(this.props.allUserFields)}\n                    </select>\n                    <div className={\"unit inline\"}>\n\n                        <input  type=\"radio\" name=\"measure_unit\" value={CM} onClick={this.setUnit}/>CM <br/>\n                        <input type=\"radio\" name=\"measure_unit\" value={MM} onClick={this.setUnit}/>MM\n                    </div>\n\n                </div>\n            )\n        }\n    }\n\n\n\n    setUnit(e){\n        this.setState({unit:e.target.value},\n        this.addConversionValue )   }\n\n    addConversionValue =()=>{\n        this.props.addConversionValue(this.props.selectedField, //adds secondary field w unit to mapValues\n            {field: this.state.field , unit: this.state.unit }) }\n\n    toggleAdd = () =>{ this.setState({addValue:!this.state.addValue})}\n\n    setField(e){\n        this.setState({field:e.target.value.split(\" \")[0] , showConv:true},\n            this.submitSelection)}\n\n    removeFieldCallBack = () =>{ //if removing secondary field, enables the field and removes data from mapValues\n        this.props.removeFieldCallBack(this.state.field,this.props.selectedField)}\n\n    removeSelection = () =>{console.log(\"removeselection\");\n        this.props.minusField(FORMAT_CONV);\n        this.removeFieldCallBack();\n        this.setState({field:null},)\n    }\n\n\n\n    submitSelection = () => {\n        console.log(\"alpa\",this.props.selectedField , \"stateField\",this.state.field,\"unselecettd\",this.getUnselected());\n\n        let{selectedField, multiCallBack} = this.props;\n\n        if(this.state.field) {\n            multiCallBack({selectedField: selectedField},\n                [this.state.field], //because callback fcts expect array for these values\n                FORMAT_CONV,\n                this.getUnselected())\n        }\n\n        this.setState({submittedField : this.state.field})\n    }\n\n   /* showConversion = () => {\n        if(this.state.field && this.state.field !== \"NULL\"){\n            let defaultVal = this.props.allUserFields[this.props.originField].exampleValue;\n            let extraVal = this.props.allUserFields[this.state.field].exampleValue;\n            extraVal = (extraVal === undefined) ? 0 : extraVal;\n            let defaultUnit = this.props.defaultUnit;\n            let scalar = 0;\n\n\n            if (defaultUnit === CM) {\n                if (this.state.unit === MM) {\n                    scalar = 1 / 10;\n                }\n                else scalar=1\n            }\n            if (defaultUnit === MM) {\n                if (this.state.unit === CM) {\n                    scalar = 10;\n                }\n                else scalar=1\n\n            }\n\n            if (this.state.showConv) {\n                return (\n                    <div className=\"inline verify\">\n                        <h5>\n                        {defaultVal}{defaultUnit} + {extraVal}{this.state.unit} for a total submitted value\n                        of { Number(defaultVal) + Number(extraVal * scalar)}</h5>\n                    </div>\n                )\n            }\n        }\n    }*/\n\n\n    showButton = () => {\n       let  {unit, field} = this.state;\n\n        if (this.state.addValue === false){\n            return <div>\n                <p>Do additional fields comprise the whole data?</p>\n                <button onClick={()=>this.toggleAdd()}> Yes</button>\n            </div>\n        }\n        if(this.state.addValue !== false && (unit !== undefined && field !== undefined)){\n            return <div>\n            <button onClick={()=>this.submitSelection()} >\n                Submit</button>\n            </div>\n        }\n    }\n\n    render() { //console.log(\"CONVERS\",this.props)\n        return (\n\n            <div className=\"fieldElement\" >\n                {this.extraUnitField()}\n                {/*{this.showButton()}*/}\n                {/*{this.showConversion()}*/}\n                <div className=\"showMapping\">\n                    {/*{this.showConversion()}*/}\n                </div>\n                </div>\n\n        );\n    }\n}\n\nexport default ConversionField;"]},"metadata":{},"sourceType":"module"}