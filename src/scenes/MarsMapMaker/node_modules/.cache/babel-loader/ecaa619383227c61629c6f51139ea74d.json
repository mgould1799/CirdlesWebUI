{"ast":null,"code":"import React from \"react\"; ////create tag for userCreator , date/time of creation , descriptor\n\nexport default function mapPrinter(mapValues) {\n  var one2oneMap = \"let map = {\\n\";\n  var logicMap = \"let logic = {\\n\";\n  var combinationMap = \"let combinations = {\\n\";\n  console.log(\"mapper map values\", mapValues);\n\n  for (var each in mapValues) {\n    console.log(\"mapper map values\", mapValues[each].userValues.field);\n\n    switch (mapValues[each].format) {\n      case \"one2one\":\n        one2oneMap = one2oneMap.concat(\" \" + mapValues[each].sesarField + \": \\\"\" + mapValues[each].userValues[0] + \"\\\",\\n\");\n        break;\n\n      case \"dateFormat\":\n        typeExist.dateFormat = true;\n        logicMap = logicMap.concat(\"  \" + mapValues[each].sesarField + \": scrippsDate,\\n\");\n        one2oneMap = one2oneMap.concat(\" \" + mapValues[each].sesarField + \": \\\"\" + mapValues[each].userValues + \"\\\",\\n\");\n        break;\n\n      case \"multi2one\":\n        typeExist.multi2One = true;\n        combinationMap = combinationMap.concat(\"  \" + mapValues[each].sesarField + \": delimit,\\n\");\n        one2oneMap = one2oneMap.concat(\" \" + mapValues[each].sesarField + \": [\" + mapValues[each].userValues.map(function (each) {\n          return \"\\\"\" + each + \"\\\"\";\n        }) + \"],\\n\");\n        break;\n\n      case \"conversion\":\n        typeExist.conversion = true;\n        one2oneMap = one2oneMap.concat(\" \" + mapValues[each].sesarField + \": [\\\"\" + mapValues[each].userValues + \"\\\"\" + \",\" + \"\\\"\" + mapValues[each].extra.field + \"\\\"\" + \"],\\n\");\n        break;\n\n      default:\n        console.log(\"mapbuilding errrrrrrror!\");\n        break;\n    }\n  }\n\n  var map = \"// ======================\\n\" + \"// Scripps Helpers\\n\" + \"// ======================\\n\" + \"\\n\" + dateFunction() + \"\\n\" + \"\\n\" + sizeConversion() + \"\\n\" + \"// creates a key value string from originalKey and new value\\n\" + \"const keyValueString = (scrippsValue, scrippsKey) => {\\n\" + \"  return scrippsKey + ':' + scrippsValue\\n\" + \"}\\n\" + \"\\n\" + delimitFunction() + \"}\\n\" + \"\\n\" + one2oneMap + combinationMap + logicMap + \"\\nreturn {map, logic, combinations}\\n\";\n  return map;\n}\nvar typeExist = {\n  conversion: false,\n  dateFormat: false,\n  multi2One: false\n};\n\nfunction sizeConversion() {\n  if (typeExist.conversion) {\n    return \"\\n\" + \"// convert mm to cm\\n\" + \"const size = (userValue, userKey) => {\\n\" + // \"const size = (scrippsValue, scrippsKey) => {\\n\" +\n    \"  return unit == 'mm' ? userValue/10 : userValue\\n\" + //\"  return scrippsKey == 'CORED_LENGTH_MM' ? scrippsValue/10 : scrippsValue\\n\" +\n    \"}\\n\";\n  }\n}\n\nfunction dateFunction() {\n  if (typeExist.dateFormat) {\n    return \"\\n\" + \"//creates a date from a string in the form YYYYDDMM\\n\" + \"const scrippsDate = (scrippsValue) => {\\n\" + \"  const y = scrippsValue.substr(0,4)\\n\" + \"  const d = scrippsValue.substr(6,2)\\n\" + \"  const m = scrippsValue.substr(4,2)\\n\" + \"  return y + '-' + m + '-' + d + 'T00:00:00Z'\\n\" + \"}\\n\";\n  } else return \"\";\n}\n\nfunction delimitFunction() {\n  if (typeExist.multi2One) {\n    return \"// creates a delimited list of values\\n\" + \"const delimit = (valueArray) => {\\n\" + \"  return valueArray.join(';')\\n\" + \"}\\n\";\n  } else return \"\";\n}","map":{"version":3,"sources":["/home/meagangould/Desktop/MarsMapMaker/src/components/BuilderComponents/Main/mapPrinter.js"],"names":["React","mapPrinter","mapValues","one2oneMap","logicMap","combinationMap","console","log","each","userValues","field","format","concat","sesarField","typeExist","dateFormat","multi2One","map","conversion","extra","dateFunction","sizeConversion","delimitFunction"],"mappings":"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","sourcesContent":["\nimport React from \"react\";\n\n////create tag for userCreator , date/time of creation , descriptor\n\nexport default function mapPrinter (mapValues){\n    var one2oneMap = ( \"let map = {\\n\")\n\n    var logicMap = (\"let logic = {\\n\" )\n\n    var combinationMap = (\"let combinations = {\\n\")\n\n\n\n    console.log(\"mapper map values\", mapValues)\n    for(var each in mapValues){\n        console.log(\"mapper map values\", mapValues[each].userValues.field)\n        switch (mapValues[each].format){\n            case \"one2one\":\n                one2oneMap = one2oneMap.concat( \" \"+mapValues[each].sesarField+ \": \\\"\"+mapValues[each].userValues[0]+\"\\\",\\n\")\n                break;\n            case \"dateFormat\":\n                typeExist.dateFormat = true;\n                logicMap = logicMap.concat(\"  \"+mapValues[each].sesarField+ \": scrippsDate,\\n\")\n                one2oneMap = one2oneMap.concat( \" \"+mapValues[each].sesarField+ \": \\\"\"+mapValues[each].userValues+\"\\\",\\n\")\n                break;\n            case\"multi2one\":\n                typeExist.multi2One = true;\n                combinationMap = combinationMap.concat(\"  \"+mapValues[each].sesarField+ \": delimit,\\n\")\n                one2oneMap = one2oneMap.concat( \" \"+mapValues[each].sesarField+ \": [\"+mapValues[each].userValues.map(each =>{ return \"\\\"\"+each+\"\\\"\"})+\"],\\n\")\n                break;\n            case \"conversion\":\n                typeExist.conversion = true;\n                one2oneMap = one2oneMap.concat( \" \"+mapValues[each].sesarField+ \": [\\\"\"+mapValues[each].userValues+\"\\\"\"+\",\"+\"\\\"\"+mapValues[each].extra.field +\"\\\"\"+\"],\\n\")\n                break;\n            default:\n               console.log(\"mapbuilding errrrrrrror!\")\n                break;\n        }\n\n        }\n\n    var map = \"// ======================\\n\" +\n        \"// Scripps Helpers\\n\" +\n        \"// ======================\\n\" +\n        \"\\n\" +\n        dateFunction() +\n\n        \"\\n\" +\n        \"\\n\" +\n        sizeConversion() +\n\n        \"\\n\" +\n        \"// creates a key value string from originalKey and new value\\n\" +\n        \"const keyValueString = (scrippsValue, scrippsKey) => {\\n\" +\n        \"  return scrippsKey + ':' + scrippsValue\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        delimitFunction() +\n        \"}\\n\" +\n        \"\\n\" +\n\n        one2oneMap +\n        combinationMap+\n        logicMap+\n\n        \"\\nreturn {map, logic, combinations}\\n\"\n\n    return map;\n    }\n\n\n\n\nvar typeExist={\n    conversion:false,\n    dateFormat:false,\n    multi2One:false}\n\n\n\n\nfunction sizeConversion(){\n    if (typeExist.conversion) {\n        return \"\\n\" +\n            \"// convert mm to cm\\n\" +\n            \"const size = (userValue, userKey) => {\\n\" +  // \"const size = (scrippsValue, scrippsKey) => {\\n\" +\n            \"  return unit == 'mm' ? userValue/10 : userValue\\n\" +//\"  return scrippsKey == 'CORED_LENGTH_MM' ? scrippsValue/10 : scrippsValue\\n\" +\n            \"}\\n\"\n    }\n}\n\nfunction dateFunction() {\n    if (typeExist.dateFormat){\n    return ( \"\\n\" +\n        \"//creates a date from a string in the form YYYYDDMM\\n\" +\n        \"const scrippsDate = (scrippsValue) => {\\n\" +\n        \"  const y = scrippsValue.substr(0,4)\\n\" +\n        \"  const d = scrippsValue.substr(6,2)\\n\" +\n        \"  const m = scrippsValue.substr(4,2)\\n\" +\n        \"  return y + '-' + m + '-' + d + 'T00:00:00Z'\\n\" +\n        \"}\\n\" )}\n    else return \"\"}\n\nfunction delimitFunction(){if (typeExist.multi2One){\n   return \"// creates a delimited list of values\\n\" +\n    \"const delimit = (valueArray) => {\\n\" +\n    \"  return valueArray.join(';')\\n\" +\n    \"}\\n\"}\n    else return \"\";\n}\n\n"]},"metadata":{},"sourceType":"module"}